////////////////////////////////////////////////////////////////////////////////////////////////////
// Noesis Engine - http://www.noesisengine.com
// Copyright (c) 2009-2010 Noesis Technologies S.L. All Rights Reserved.
// [CR #868]
////////////////////////////////////////////////////////////////////////////////////////////////////


#include <NsCore/Algorithm.h>
#include <NsMath/Utils.h>

#include <limits>


namespace Noesis
{
namespace Drawing
{

////////////////////////////////////////////////////////////////////////////////////////////////////
Size::Size(NsFloat32 w, NsFloat32 h): width(w), height(h)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Size::Size(const Sizei& size): width(static_cast<NsFloat32>(size.width)),
    height(static_cast<NsFloat32>(size.height))
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Size::Size(const Size& size): width(size.width), height(size.height)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Size& Size::operator=(const Size& size)
{
    width = size.width;
    height = size.height;

    return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
NsBool Size::operator==(const Size& size) const
{
    return width == size.width && height == size.height;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
NsBool Size::operator!=(const Size& size) const
{
    return !(*this == size);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Size Size::operator+(const Size& size) const
{
    return Size(width + size.width, height + size.height);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Size Size::operator-(const Size& size) const
{
    return Size(width - size.width, height - size.height);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Size Size::operator*(NsFloat32 k) const
{
    return Size(width * k, height * k);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Size Size::operator/(NsFloat32 k) const
{
    return Size(width / k, height / k);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Size& Size::operator+=(const Size& size)
{
    width += size.width;
    height += size.height;
    
    return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Size& Size::operator-=(const Size& size)
{
    width -= size.width;
    height -= size.height;
    
    return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Size& Size::operator*=(NsFloat32 k)
{
    width *= k;
    height *= k;
    
    return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Size& Size::operator/=(NsFloat32 k)
{
    width /= k;
    height /= k;
    
    return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void Size::Expand(const Size& size)
{
    width = Math::Max(width, size.width);
    height = Math::Max(height, size.height);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void Size::Scale(NsFloat32 scaleX, NsFloat32 scaleY)
{
    width *= scaleX;
    height *= scaleY;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Size Size::Zero()
{
    return Size(0.0f, 0.0f);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Size Size::Infinite()
{
    const NsFloat32 inf = std::numeric_limits<NsFloat32>::infinity();
    return Size(inf, inf);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Sizei::Sizei(NsSize w, NsSize h): width(w), height(h)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Sizei::Sizei(const Size& size): width(static_cast<NsSize>(size.width)),
    height(static_cast<NsSize>(size.height))
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Sizei::Sizei(const Sizei& size): width(size.width), height(size.height)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Sizei& Sizei::operator=(const Sizei& size)
{
    width = size.width;
    height = size.height;

    return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
NsBool Sizei::operator==(const Sizei& size) const
{
    return width == size.width && height == size.height;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
NsBool Sizei::operator!=(const Sizei& size) const
{
    return !(*this == size);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Sizei Sizei::operator+(const Sizei& size) const
{
    return Sizei(width + size.width, height + size.height);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Sizei Sizei::operator-(const Sizei& size) const
{
    return Sizei(width - size.width, height - size.height);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Sizei Sizei::operator*(NsSize k) const
{
    return Sizei(width * k, height * k);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Sizei Sizei::operator/(NsSize k) const
{
    return Sizei(width / k, height / k);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Sizei& Sizei::operator+=(const Sizei& size)
{
    width += size.width;
    height += size.height;

    return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Sizei& Sizei::operator-=(const Sizei& size)
{
    width -= size.width;
    height -= size.height;

    return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Sizei& Sizei::operator*=(NsSize k)
{
    width *= k;
    height *= k;

    return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Sizei& Sizei::operator/=(NsSize k)
{
    width /= k;
    height /= k;

    return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void Sizei::Expand(const Sizei& size)
{
    width = Math::Max(width, size.width);
    height = Math::Max(height, size.height);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void Sizei::Scale(NsSize scaleX, NsSize scaleY)
{
    width *= scaleX;
    height *= scaleY;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Sizei Sizei::Zero()
{
    return Sizei(0, 0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Sizei Sizei::Infinite()
{
    const NsSize inf = std::numeric_limits<NsSize>::infinity();
    return Sizei(inf, inf);
}

}
}
