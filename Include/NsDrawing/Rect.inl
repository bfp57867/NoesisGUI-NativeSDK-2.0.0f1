////////////////////////////////////////////////////////////////////////////////////////////////////
// Noesis Engine - http://www.noesisengine.com
// Copyright (c) 2009-2010 Noesis Technologies S.L. All Rights Reserved.
// [CR #868]
////////////////////////////////////////////////////////////////////////////////////////////////////


#include <NsCore/Error.h>
#include <NsDrawing/Size.h>
#include <NsDrawing/Point.h>
#include <NsMath/Utils.h>

#include <limits>


namespace Noesis
{
namespace Drawing
{

////////////////////////////////////////////////////////////////////////////////////////////////////
Rect::Rect(NsFloat32 left, NsFloat32 top, NsFloat32 right, NsFloat32 bottom): x(left), y(top), 
    width(right - left), height(bottom - top)
{
    NS_ASSERT(left <= right);
    NS_ASSERT(top <= bottom);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Rect::Rect(const Size& size): x(0.0f), y(0.0f), width(size.width), height(size.height)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Rect::Rect(const Point& location, const Size& size): x(location.x), y(location.y),
    width(size.width), height(size.height)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Rect::Rect(const Recti& rect):
    x(static_cast<NsFloat32>(rect.x)), y(static_cast<NsFloat32>(rect.y)),
    width(static_cast<NsFloat32>(rect.width)), height(static_cast<NsFloat32>(rect.height))
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Rect::Rect(const Rect& rect): x(rect.x), y(rect.y), width(rect.width), height(rect.height)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Rect& Rect::operator=(const Rect& rect)
{
    x = rect.x;
    y = rect.y;
    width = rect.width;
    height = rect.height;

    return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
NsBool Rect::operator==(const Rect& rect) const
{
    return x == rect.x && y == rect.y && width == rect.width && height == rect.height;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
NsBool Rect::operator!=(const Rect& rect) const
{
    return !(*this == rect);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Point Rect::GetLocation() const
{
    return Point(x, y);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void Rect::SetLocation(const Point& location)
{
    x = location.x;
    y = location.y;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Size Rect::GetSize() const
{
    return Size(width, height);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void Rect::SetSize(const Size& size)
{
    width = size.width;
    height = size.height;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
NsFloat32 Rect::GetLeft() const
{
    return x;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
NsFloat32 Rect::GetRight() const
{
    return Math::IsInfinity(width) ? std::numeric_limits<NsFloat32>::infinity() : x + width;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
NsFloat32 Rect::GetTop() const
{
    return y;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
NsFloat32 Rect::GetBottom() const
{
    return Math::IsInfinity(height) ? std::numeric_limits<NsFloat32>::infinity() : y + height;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Point Rect::GetTopLeft() const
{
    return Point(x, y);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Point Rect::GetTopRight() const
{
    return Point(GetRight(), y);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Point Rect::GetBottomLeft() const
{
    return Point(x, GetBottom());
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Point Rect::GetBottomRight() const
{
    return Point(GetRight(), GetBottom());
}

////////////////////////////////////////////////////////////////////////////////////////////////////
NsBool Rect::IsEmpty() const
{
    return width == 0.0f || height == 0.0f;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
NsBool Rect::Contains(NsFloat32 x_, NsFloat32 y_) const
{
    return !IsEmpty() &&
        x_ >= GetLeft() && x_ <= GetRight() &&
        y_ >= GetTop() && y_ <= GetBottom();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
NsBool Rect::Contains(const Point& point) const
{
    return Contains(point.x, point.y);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
NsBool Rect::Contains(const Rect& rect) const
{
    return !IsEmpty() && !rect.IsEmpty() && 
        rect.GetLeft() >= GetLeft() && rect.GetRight() <= GetRight() &&
        rect.GetTop() >= GetTop() && rect.GetBottom() <= GetBottom();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void Rect::Inflate(NsFloat32 width_, NsFloat32 height_)
{
    x -= width_;
    y -= height_;
    width += 2.0f * width_;
    height += 2.0f * height_;

    if (width <= 0.0f || height <= 0.0f)
    {
        x = 0.0f;
        y = 0.0f;
        width = 0.0f;
        height = 0.0f;
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void Rect::Inflate(const Size& size)
{
    Inflate(size.width, size.height);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
NsBool Rect::IntersectsWith(const Rect& rect) const
{
    const NsFloat32 eps = std::numeric_limits<NsFloat32>::epsilon();
    Size s = Intersect(rect).GetSize();
    return s.width > eps && s.height > eps;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void Rect::Offset(const Point& offset)
{
    x += offset.x;
    y += offset.y;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void Rect::Scale(NsFloat32 scaleX, NsFloat32 scaleY)
{
    width *= scaleX;
    height *= scaleY;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void Rect::Expand(const Point& point)
{
    NsFloat32 x0 = Math::Min(x, point.x);
    NsFloat32 y0 = Math::Min(y, point.y);
    NsFloat32 x1 = Math::Max(GetRight(), point.x);
    NsFloat32 y1 = Math::Max(GetBottom(), point.y);

    x = x0;
    y = y0;
    width = x1 - x0;
    height = y1 - y0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void Rect::Expand(const Rect& rect)
{
    NsFloat32 x0 = Math::Min(x, rect.x);
    NsFloat32 y0 = Math::Min(y, rect.y);
    NsFloat32 x1 = Math::Max(GetRight(), rect.GetRight());
    NsFloat32 y1 = Math::Max(GetBottom(), rect.GetBottom());

    x = x0;
    y = y0;
    width = x1 - x0;
    height = y1 - y0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Rect Rect::Empty()
{
    return Rect(0.0f, 0.0f, 0.0f, 0.0f);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Rect Rect::Infinite()
{
    const NsFloat32 inf = std::numeric_limits<NsFloat32>::infinity();
    return Rect(-inf, -inf, inf, inf);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Recti::Recti(NsInt left, NsInt top, NsInt right, NsInt bottom): x(left), y(top), 
    width(right - left), height(bottom - top)
{
    NS_ASSERT(left <= right);
    NS_ASSERT(top <= bottom);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Recti::Recti(const Sizei& size): x(0), y(0), width(size.width), height(size.height)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Recti::Recti(const Pointi& location, const Sizei& size): x(location.x), y(location.y),
    width(size.width), height(size.height)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Recti::Recti(const Recti& rect): x(rect.x), y(rect.y), width(rect.width), height(rect.height)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Recti& Recti::operator=(const Recti& rect)
{
    x = rect.x;
    y = rect.y;
    width = rect.width;
    height = rect.height;

    return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
NsBool Recti::operator==(const Recti& rect) const
{
    return x == rect.x && y == rect.y && width == rect.width && height == rect.height;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
NsBool Recti::operator!=(const Recti& rect) const
{
    return !(*this == rect);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Pointi Recti::GetLocation() const
{
    return Pointi(x, y);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void Recti::SetLocation(const Pointi& location)
{
    x = location.x;
    y = location.y;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Sizei Recti::GetSize() const
{
    return Sizei(width, height);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void Recti::SetSize(const Sizei& size)
{
    width = size.width;
    height = size.height;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
NsInt Recti::GetLeft() const
{
    return x;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
NsInt Recti::GetRight() const
{
    return Math::IsInfinity(static_cast<NsFloat64>(width)) ?
        std::numeric_limits<NsInt>::infinity() : x + width;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
NsInt Recti::GetTop() const
{
    return y;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
NsInt Recti::GetBottom() const
{
    return Math::IsInfinity(static_cast<NsFloat64>(height)) ?
        std::numeric_limits<NsInt>::infinity() : y + height;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Pointi Recti::GetTopLeft() const
{
    return Pointi(x, y);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Pointi Recti::GetTopRight() const
{
    return Pointi(GetRight(), y);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Pointi Recti::GetBottomLeft() const
{
    return Pointi(x, GetBottom());
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Pointi Recti::GetBottomRight() const
{
    return Pointi(GetRight(), GetBottom());
}

////////////////////////////////////////////////////////////////////////////////////////////////////
NsBool Recti::IsEmpty() const
{
    return width == 0 || height == 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
NsBool Recti::Contains(NsInt x_, NsInt y_) const
{
    return !IsEmpty() &&
        x_ >= GetLeft() && x_ <= GetRight() &&
        y_ >= GetTop() && y_ <= GetBottom();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
NsBool Recti::Contains(const Pointi& point) const
{
    return Contains(point.x, point.y);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
NsBool Recti::Contains(const Recti& rect) const
{
    return !IsEmpty() && !rect.IsEmpty() &&
        rect.GetLeft() >= GetLeft() && rect.GetRight() <= GetRight() &&
        rect.GetTop() >= GetTop() && rect.GetBottom() <= GetBottom();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void Recti::Inflate(NsInt width_, NsInt height_)
{
    x -= width_;
    y -= height_;
    width += 2 * width_;
    height += 2 * height_;

    if (width <= 0.0f || height <= 0.0f)
    {
        x = 0;
        y = 0;
        width = 0;
        height = 0;
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void Recti::Inflate(const Sizei& size)
{
    Inflate(size.width, size.height);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
NsBool Recti::IntersectsWith(const Recti& rect) const
{
    Sizei s = Intersect(rect).GetSize();
    return s.width > 0 && s.height > 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void Recti::Offset(const Pointi& offset)
{
    x += offset.x;
    y += offset.y;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void Recti::Scale(NsInt scaleX, NsInt scaleY)
{
    width *= scaleX;
    height *= scaleY;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void Recti::Expand(const Pointi& point)
{
    NsInt x0 = Math::Min(x, point.x);
    NsInt y0 = Math::Min(y, point.y);
    NsInt x1 = Math::Max(GetRight(), point.x);
    NsInt y1 = Math::Max(GetBottom(), point.y);

    x = x0;
    y = y0;
    width = x1 - x0;
    height = y1 - y0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void Recti::Expand(const Recti& rect)
{
    NsInt x0 = Math::Min(x, rect.x);
    NsInt y0 = Math::Min(y, rect.y);
    NsInt x1 = Math::Max(GetRight(), rect.GetRight());
    NsInt y1 = Math::Max(GetBottom(), rect.GetBottom());

    x = x0;
    y = y0;
    width = x1 - x0;
    height = y1 - y0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Recti Recti::Empty()
{
    return Recti(0, 0, 0, 0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Recti Recti::Infinite()
{
    const NsInt inf = std::numeric_limits<NsInt>::infinity();
    return Recti(-inf, -inf, inf, inf);
}

}
}
