////////////////////////////////////////////////////////////////////////////////////////////////////
// Noesis Engine - http://www.noesisengine.com
// Copyright (c) 2009-2010 Noesis Technologies S.L. All Rights Reserved.
// [CR #518]
////////////////////////////////////////////////////////////////////////////////////////////////////


namespace Noesis
{
namespace Core
{

////////////////////////////////////////////////////////////////////////////////////////////////////
inline Symbol::Symbol(): mIndex(0)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline Symbol::Symbol(NsUInt32 index): mIndex(index)
{
}


////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsUInt32 Symbol::GetId() const
{
    return mIndex;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline Symbol& Symbol::SetId(NsUInt32 id)
{
    mIndex = id;
    return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsBool Symbol::IsNull() const
{
    return mIndex == 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsBool Symbol::operator==(const Symbol& symbol) const
{
    return mIndex == symbol.mIndex;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsBool Symbol::operator!=(const Symbol& symbol) const
{
    return mIndex != symbol.mIndex;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsBool Symbol::operator<(const Symbol& symbol) const
{
    return mIndex < symbol.mIndex;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsBool Symbol::operator>(const Symbol& symbol) const
{
    return mIndex > symbol.mIndex;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsBool Symbol::operator<=(const Symbol& symbol) const
{
    return mIndex <= symbol.mIndex;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsBool Symbol::operator>=(const Symbol& symbol) const
{
    return mIndex >= symbol.mIndex;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline Symbol::operator NsUInt32() const
{
    return mIndex;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline Symbol Symbol::Null()
{
    return Symbol(NsUInt32(0));
}

}
}