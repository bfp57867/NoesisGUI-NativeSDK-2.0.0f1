////////////////////////////////////////////////////////////////////////////////////////////////////
// Noesis Engine - http://www.noesisengine.com
// Copyright (c) 2009-2010 Noesis Technologies S.L. All Rights Reserved.
// [CR #1336]
////////////////////////////////////////////////////////////////////////////////////////////////////


#include <NsCore/Error.h>
#include <NsCore/ValueHelper.h>


namespace Noesis
{
namespace Core
{

////////////////////////////////////////////////////////////////////////////////////////////////////
BaseNullable::BaseNullable(NsBool hasValue): mHasValue(hasValue)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
NsBool BaseNullable::HasValue() const
{
    return mHasValue;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
template<class T>
Nullable<T>::Nullable(): BaseNullable(false)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
template<class T>
Nullable<T>::Nullable(typename Param<T>::Type value): BaseNullable(true), mValue(value)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
template<class T>
typename Param<T>::Type Nullable<T>::GetValue() const
{
    NS_ASSERT(mHasValue);
    return mValue;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
template<class T>
Nullable<T>& Nullable<T>::operator=(typename Param<T>::Type value)
{
    mHasValue = true;
    mValue = value;
    return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
template<class T>
NsBool Nullable<T>::operator==(const Nullable<T>& v) const
{
    return (!mHasValue && !v.mHasValue) || (mHasValue && v.mHasValue && mValue == v.mValue);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
template<class T>
NsBool Nullable<T>::operator!=(const Nullable<T>& value) const
{
    return !(*this == value);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
template<class T>
NsBool Nullable<T>::operator==(typename Param<T>::Type value) const
{
    return mHasValue && mValue == value;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
template<class T>
NsBool Nullable<T>::operator!=(typename Param<T>::Type value) const
{
    return !(*this == value);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
template<class T>
NsString Nullable<T>::ToString() const
{
    return mHasValue ? Core::ToString(mValue) : "";
}

////////////////////////////////////////////////////////////////////////////////////////////////////
template<class T>
NsUInt32 Nullable<T>::GetHashCode() const
{
    return mHasValue ? Core::GetHashCode(mValue) : 0x5bd1e995;
}

}
}
