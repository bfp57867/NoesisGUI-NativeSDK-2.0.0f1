////////////////////////////////////////////////////////////////////////////////////////////////////
// Noesis Engine - http://www.noesisengine.com
// Copyright (c) 2009-2010 Noesis Technologies S.L. All Rights Reserved.
////////////////////////////////////////////////////////////////////////////////////////////////////

#include <NsCore/Memory.h>

////////////////////////////////////////////////////////////////////////////////////////////////////
// nstl malloc allocator implementation
////////////////////////////////////////////////////////////////////////////////////////////////////

namespace eastl
{

////////////////////////////////////////////////////////////////////////////////////////////////////
inline SafeAllocator::SafeAllocator(const char*)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline SafeAllocator::SafeAllocator(const SafeAllocator&)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline SafeAllocator::SafeAllocator(const SafeAllocator&, const char*)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline SafeAllocator& SafeAllocator::operator=(const SafeAllocator&)
{
    return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline const char* SafeAllocator::get_name() const
{
    return "";
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline void SafeAllocator::set_name(const char*)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline void* SafeAllocator::allocate(size_t n, int)
{
    return NsSafeAlloc(n);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline void* SafeAllocator::allocate(size_t n, size_t, size_t, int flags)
{
    return allocate(n, flags);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline void SafeAllocator::deallocate(void* p, size_t)
{
    NsSafeDealloc(p);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline bool operator==(const SafeAllocator&, const SafeAllocator&)
{
    return true; // All allocators are considered equal
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline bool operator!=(const SafeAllocator&, const SafeAllocator&)
{
    return false; // All allocators are considered equal
}

}
