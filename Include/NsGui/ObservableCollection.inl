////////////////////////////////////////////////////////////////////////////////////////////////////
// Noesis Engine - http://www.noesisengine.com
// Copyright (c) 2009-2010 Noesis Technologies S.L. All Rights Reserved.
////////////////////////////////////////////////////////////////////////////////////////////////////


namespace Noesis
{
namespace Gui
{

////////////////////////////////////////////////////////////////////////////////////////////////////
template<class T>
T* ObservableCollection<T>::Get(NsSize index) const
{
    return NsStaticCast<T*>(Collection::Get(index));
}

////////////////////////////////////////////////////////////////////////////////////////////////////
template<class T>
void ObservableCollection<T>::Set(NsSize index, T* item)
{
    Collection::Set(index, item);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
template<class T>
NsSize ObservableCollection<T>::Add(T* item)
{
    return Collection::Add(item);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
template<class T>
NsBool ObservableCollection<T>::Contains(T* item) const
{
    return Collection::Contains(item);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
template<class T>
NsInt ObservableCollection<T>::IndexOf(T* item) const
{
    return Collection::IndexOf(item);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
template<class T>
void ObservableCollection<T>::Insert(NsSize index, T* item)
{
    Collection::Insert(index, item);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
template<class T>
void ObservableCollection<T>::Remove(T* item)
{
    Collection::Remove(item);
}

}
}
