////////////////////////////////////////////////////////////////////////////////////////////////////
// Noesis Engine - http://www.noesisengine.com
// Copyright (c) 2009-2010 Noesis Technologies S.L. All Rights Reserved.
// [CR #1382]
////////////////////////////////////////////////////////////////////////////////////////////////////


namespace Noesis
{
namespace Gui
{

////////////////////////////////////////////////////////////////////////////////////////////////////
inline TimeSpan::TimeSpan(): mTicks(0)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline TimeSpan::TimeSpan(NsFloat64 seconds): mTicks(static_cast<NsInt64>(seconds * 10000000.0))
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline TimeSpan::TimeSpan(NsInt64 ticks): mTicks(ticks)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline TimeSpan TimeSpan::Zero()
{
    return TimeSpan(0LL);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsInt TimeSpan::GetDays() const
{
    return static_cast<NsInt>(mTicks / 864000000000LL);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsInt TimeSpan::GetHours() const
{
    return static_cast<NsInt>((mTicks / 36000000000LL) % 24L);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsInt TimeSpan::GetMinutes() const
{
    return static_cast<NsInt>((mTicks / 600000000L) % 60L);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsInt TimeSpan::GetSeconds() const
{
    return static_cast<NsInt>((mTicks / 10000000L) % 60L);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsInt TimeSpan::GetMilliseconds() const
{
    return static_cast<NsInt>((mTicks / 10000L) % 1000L);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsInt64 TimeSpan::GetTicks() const
{
    return mTicks;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsFloat64 TimeSpan::GetTimeInSeconds() const
{
    return mTicks / 10000000.0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsBool TimeSpan::operator==(const TimeSpan& other) const
{
    return mTicks == other.mTicks;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsBool TimeSpan::operator!=(const TimeSpan& other) const
{
    return mTicks != other.mTicks;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline TimeSpan& TimeSpan::operator+=(const TimeSpan& other)
{
    mTicks += other.mTicks;
    return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline TimeSpan& TimeSpan::operator-=(const TimeSpan& other)
{
    mTicks -= other.mTicks;
    return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline TimeSpan& TimeSpan::operator*=(NsFloat32 value)
{
    mTicks = static_cast<NsInt64>(mTicks * value);
    return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline TimeSpan operator+(const TimeSpan& t0, const TimeSpan& t1)
{
    return TimeSpan(t0.GetTicks() + t1.GetTicks());
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline TimeSpan operator-(const TimeSpan& t0, const TimeSpan& t1)
{
    return TimeSpan(t0.GetTicks() - t1.GetTicks());
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline TimeSpan operator*(const TimeSpan& t, NsFloat32 value)
{
    return TimeSpan(static_cast<NsInt64>(t.GetTicks() * value));
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline TimeSpan operator*(NsFloat32 value, const TimeSpan& t)
{
    return TimeSpan(static_cast<NsInt64>(value * t.GetTicks()));
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsFloat32 operator/(const TimeSpan& t0, const TimeSpan& t1)
{
    return static_cast<NsFloat32>(
        static_cast<NsFloat64>(t0.GetTicks()) / static_cast<NsFloat64>(t1.GetTicks()));
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline TimeSpan operator/(const TimeSpan& t, NsFloat32 value)
{
    return TimeSpan(static_cast<NsInt64>(t.GetTicks() / value));
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsBool operator<(const TimeSpan& t0, const TimeSpan& t1)
{
    return t0.GetTicks() < t1.GetTicks();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsBool operator<=(const TimeSpan& t0, const TimeSpan& t1)
{
    return t0.GetTicks() <= t1.GetTicks();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsBool operator>(const TimeSpan& t0, const TimeSpan& t1)
{
    return t0.GetTicks() > t1.GetTicks();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsBool operator>=(const TimeSpan& t0, const TimeSpan& t1)
{
    return t0.GetTicks() >= t1.GetTicks();
}

}
}
