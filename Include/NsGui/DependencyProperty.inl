////////////////////////////////////////////////////////////////////////////////////////////////////
// Noesis Engine - http://www.noesisengine.com
// Copyright (c) 2009-2010 Noesis Technologies S.L. All Rights Reserved.
// [CR #781]
////////////////////////////////////////////////////////////////////////////////////////////////////


#include <NsGui/PropertyMetadata.h>
#include <NsCore/TypeProperty.h>


namespace Noesis
{
namespace Gui
{

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsSymbol DependencyProperty::GetName() const
{
    return mName;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline const Core::Type* DependencyProperty::GetType() const
{
    return mType;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline const Core::TypeClass* DependencyProperty::GetOwnerType() const
{
    return mOwnerType;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsBool DependencyProperty::IsReadOnly() const
{
    return mIsReadOnly;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsSize DependencyProperty::GetSize() const
{
    return mSize;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline const Core::TypeProperty* DependencyProperty::GetTypeProperty() const
{
    NS_ASSERT(mOwnerType);
    return mOwnerType->FindProperty(mName);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
template<class T>
const T* DependencyProperty::FindTypeMetaData() const
{
    const Core::TypeProperty* dp = GetTypeProperty();
    if (dp)
    {
        return dp->GetMetaData().Find<T>();
    }

    return 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline const DependencyProperty::ValidateValueDelegate& 
DependencyProperty::GetValidateValueDelegate() const
{
    return mValidateValueDelegate;
}

}
}
