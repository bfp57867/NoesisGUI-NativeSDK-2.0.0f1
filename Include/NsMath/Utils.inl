////////////////////////////////////////////////////////////////////////////////////////////////////
// Noesis Engine - http://www.noesisengine.com
// Copyright (c) 2009-2010 Noesis Technologies S.L. All Rights Reserved.
////////////////////////////////////////////////////////////////////////////////////////////////////


#include <NsCore/Algorithm.h>
#include <NsCore/Error.h>

#include <float.h>
#include <math.h>
#include <stdlib.h>
#include <limits>


namespace Noesis
{
namespace Math
{

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsBool IsPow2(NsSize x)
{
    return x == 0 ? false: ((x & (x - 1)) == 0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsUInt32 NearestPow2(NsUInt32 x)
{
    NsInt32 next = NextPow2(x);
    NsInt32 prev = PrevPow2(x);

    if (x - prev <= next - x)
    {
        return prev;
    }
    else
    {
        return next;
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsUInt32 NextPow2(NsUInt32 x)
{
    /// Hacker's Delight (pg 48)
    x = x - 1;
    x = x | (x >> 1);
    x = x | (x >> 2);
    x = x | (x >> 4);
    x = x | (x >> 8);
    x = x | (x >> 16);

    return x + 1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsUInt32 PrevPow2(NsUInt32 x)
{
    /// Hacker's Delight (pg 47)
    x = x | (x >> 1);
    x = x | (x >> 2);
    x = x | (x >> 4);
    x = x | (x >> 8);
    x = x | (x >> 16);

    return x - (x >> 1);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsBool IsOne(NsFloat32 val, NsFloat32 epsilon)
{
    return fabsf(val - 1.0f) < epsilon;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsBool IsZero(NsFloat32 val, NsFloat32 epsilon)
{
    return fabsf(val) < epsilon;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsBool AreClose(NsFloat32 a, NsFloat32 b, NsFloat32 epsilon)
{
    return fabsf(a - b) < epsilon;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsBool IsPositiveInfinity(NsFloat32 val)
{
    return val > 0.0f && IsInfinity(val);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsBool IsPositiveInfinity(NsFloat64 val)
{
    return val > 0.0 && IsInfinity(val);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsBool IsNegativeInfinity(NsFloat32 val)
{
    return val < 0.0f && IsInfinity(val);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsBool IsNegativeInfinity(NsFloat64 val)
{
    return val < 0.0 && IsInfinity(val);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsBool IsInfinity(NsFloat32 val)
{
    return !IsFinite(val) && !IsNaN(val);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsBool IsInfinity(NsFloat64 val)
{
    return !IsFinite(val) && !IsNaN(val);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsBool IsNaN(NsFloat32 val)
{
#if defined(NS_COMPILER_GCC)
    return __builtin_isnan(val);
#elif defined(NS_COMPILER_MSVC) && NS_COMPILER_VERSION >= 1800
    return isnan(val);
#else
    return _isnan(val) != 0;
#endif
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsBool IsNaN(NsFloat64 val)
{
#if defined(NS_COMPILER_GCC)
    return __builtin_isnan(val);
#elif defined(NS_COMPILER_MSVC) && NS_COMPILER_VERSION >= 1800
    return isnan(val);
#else
    return _isnan(val) != 0;
#endif
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsBool IsFinite(NsFloat32 val)
{
#if defined(NS_COMPILER_GCC)
    return __builtin_isfinite(val);
#elif defined(NS_COMPILER_MSVC) && NS_COMPILER_VERSION >= 1800
    return isfinite(val);
#else
    return _finite(val) != 0;
#endif
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsBool IsFinite(NsFloat64 val)
{
#if defined(NS_COMPILER_GCC)
    return __builtin_isfinite(val);
#elif defined(NS_COMPILER_MSVC) && NS_COMPILER_VERSION >= 1800
    return isfinite(val);
#else
    return _finite(val) != 0;
#endif
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsInt Trunc(NsFloat32 val)
{
    return static_cast<NsInt>(val);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsInt Round(NsFloat32 val)
{
    // In SSE4.1 _mm_round_ss could be used
    return static_cast<NsInt>(val > 0.0f ? val + 0.5f : val - 0.5f);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsFloat32 Floor(NsFloat32 val)
{
    // In SSE4.1 _mm_round_ss could be used
    return floorf(val);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsFloat32 Ceil(NsFloat32 val)
{
    // In SSE4.1 _mm_round_ss could be used
    return ceilf(val);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
template<class T> const T& Max(const T& a, const T& b)
{
    return a < b ? b : a;
}

template<class T> const T& Min(const T& a, const T& b)
{
    return b < a ? b : a;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
template<class T> T Clip(T val, T min, T max)
{
    NS_ASSERT(min <= max);
    return Min(Max(min, val), max);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
NsFloat32 Lerp(NsFloat32 x, NsFloat32 y, NsFloat32 t)
{
    return x + t * (y - x);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
NsFloat32 Step(NsFloat32 edge, NsFloat32 x)
{
    return x < edge ? 0.0f: 1.0f;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
NsFloat32 SmoothStep(NsFloat32 edge0, NsFloat32 edge1, NsFloat32 x)
{
    if (x < edge0)
    {
        return 0.0f;
    }
    else if (x >= edge1)
    {
        return 1.0f;
    }

    // Scale/bias into [0..1] range
    
    x = (x - edge0) / (edge1 - edge0); 
    return x * x * (3.0f - 2.0f * x);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
NsFloat32 SmoothPulse(NsFloat32 edge0, NsFloat32 edge1, NsFloat32 edge2, NsFloat32 edge3,
    NsFloat32 x)
{
    return SmoothStep(edge0, edge1, x) - SmoothStep(edge2, edge3, x);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
NsUInt64 Log2(NsUInt64 v)
{
    NsUInt64 r = 0;
    
    if (v & 0xFFFFFFFF00000000LL) { v >>= 32; r |= 32; }
    if (v & 0xFFFF0000) { v >>= 16; r |= 16; }
    if (v & 0xFF00) { v >>= 8; r |= 8; }
    if (v & 0xF0) { v >>= 4; r |= 4; }
    if (v & 0xC) { v >>= 2; r |= 2; }
    if (v & 0x2) { r |= 1; }

    return r;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
NsUInt32 Log2(NsUInt32 v)
{
    NsUInt32 r = 0;

    if (v & 0xFFFF0000) { v >>= 16; r |= 16; }
    if (v & 0xFF00) { v >>= 8; r |= 8; }
    if (v & 0xF0) { v >>= 4; r |= 4; }
    if (v & 0xC) { v >>= 2; r |= 2; }
    if (v & 0x2) { r |= 1; }

    return r;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsFloat32 LogBase(NsFloat32 val, NsFloat32 base)
{
    return logf(val) / logf(base);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsFloat64 LogBase(NsFloat64 val, NsFloat64 base)
{
    return log(val) / log(base);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsFloat32 FRand()
{
    return static_cast<NsFloat32>(rand()) / RAND_MAX;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsFloat32 Pow(NsFloat32 base, NsFloat32 exponent)
{
    return powf(base, exponent);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsFloat64 Pow(NsFloat64 base, NsFloat64 exponent)
{
    return pow(base, exponent);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsFloat32 Sqr(NsFloat32 v)
{
    return v * v;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsFloat64 Sqr(NsFloat64 v)
{
    return v * v;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsFloat32 Sqrt(NsFloat32 v)
{
    return sqrtf(v);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsFloat64 Sqrt(NsFloat64 v)
{
    return sqrt(v);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsFloat32 Sin(NsFloat32 v)
{
    return sinf(v);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsFloat64 Sin(NsFloat64 v)
{
    return sin(v);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsFloat32 Cos(NsFloat32 v)
{
    return cosf(v);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsFloat64 Cos(NsFloat64 v)
{
    return cos(v);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsFloat32 ASin(NsFloat32 v)
{
    return asinf(v);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsFloat64 ASin(NsFloat64 v)
{
    return asin(v);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsFloat32 ACos(NsFloat32 v)
{
    return acosf(v);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsFloat64 ACos(NsFloat64 v)
{
    return acos(v);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsFloat32 Tan(NsFloat32 v)
{
    return tanf(v);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsFloat64 Tan(NsFloat64 v)
{
    return tan(v);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsFloat32 ATan2(NsFloat32 v0, NsFloat32 v1)
{
    return atan2f(v0, v1);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsFloat64 ATan2(NsFloat64 v0, NsFloat64 v1)
{
    return atan2(v0, v1);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsInt Abs(NsInt v)
{
    return abs(v);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsFloat32 Abs(NsFloat32 v)
{
    return fabsf(v);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline NsFloat64 Abs(NsFloat64 v)
{
    return fabs(v);
}

}
}
